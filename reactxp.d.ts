/** Declaration file generated by dts-gen */

export class ActivityIndicator {
    constructor(props: any);

    componentDidMount(): void;

    componentWillUnmount(): void;

    render(): any;

}

export class Button {
    constructor(props: any, context: any);

    blur(): void;

    componentDidMount(...args: any[]): void;

    componentWillUnmount(...args: any[]): void;

    componentWillUpdate(...args: any[]): void;

    focus(): void;

    getChildContext(): any;

    render(): any;

}

export class Component {
    constructor(props: any, context: any, updater: any);

    forceUpdate(callback: any): void;

    setState(partialState: any, callback: any): void;

}

export class GestureView {
    constructor(...args: any[]);

    componentDidMount(): void;

    componentWillUnmount(): void;

    render(): any;

}

export class Image {
    constructor(props: any);

    componentDidMount(): void;

    componentWillReceiveProps(nextProps: any): void;

    componentWillUnmount(): void;

    getChildContext(): any;

    getNativeHeight(): any;

    getNativeWidth(): any;

    render(): any;

    static prefetch(url: any): any;

}

export class Link {
    constructor(...args: any[]);

    componentDidMount(...args: any[]): void;

    componentWillUnmount(...args: any[]): void;

    componentWillUpdate(...args: any[]): void;

    render(): any;

}

export class Picker {
    constructor(...args: any[]);

    render(): any;

}

export class ScrollView {
    constructor(props: any);

    addToScrollLeft(deltaLeft: any, animate: any): void;

    addToScrollTop(deltaTop: any, animate: any): void;

    componentDidMount(): void;

    componentDidUpdate(): void;

    componentWillMount(): void;

    componentWillReceiveProps(newProps: any): void;

    componentWillUnmount(): void;

    render(): any;

    setScrollLeft(scrollLeft: any, animate: any): void;

    setScrollTop(scrollTop: any, animate: any): void;

    static setActivationState(newState: any): void;

}

export class Text {
    constructor(...args: any[]);

    blur(): void;

    focus(): void;

    getChildContext(): any;

    render(): any;

}

export class TextInput {
    constructor(props: any);

    blur(): void;

    componentDidMount(...args: any[]): void;

    componentWillReceiveProps(nextProps: any): void;

    componentWillUnmount(...args: any[]): void;

    componentWillUpdate(...args: any[]): void;

    focus(): void;

    getSelectionRange(): any;

    isFocused(): any;

    render(): any;

    selectAll(): void;

    selectRange(start: any, end: any): void;

    setAccessibilityFocus(): void;

    setValue(value: any): void;

}

export class View {
    constructor(props: any, context: any);

    componentDidMount(...args: any[]): void;

    componentWillReceiveProps(nextProps: any): void;

    componentWillUnmount(...args: any[]): void;

    componentWillUpdate(...args: any[]): void;

    getChildContext(): any;

    render(): any;

    setFocusLimited(limited: any): void;

    setFocusRestricted(restricted: any): void;

    static setActivationState(newState: any): void;

}

export class WebView {
    constructor(props: any);

    componentDidMount(): void;

    componentDidUpdate(prevProps: any, prevState: any): void;

    goBack(): void;

    goForward(): void;

    postMessage(message: any, targetOrigin: any): void;

    reload(): void;

    render(): any;

}

export function createElement(type: any, props: any, children: any, ...args: any[]): any;

export namespace Accessibility {
    function announceForAccessibility(announcement: any): void;

    function isHighContrastEnabled(): any;

    function isScreenReaderEnabled(): any;

    namespace announceForAccessibility {
        const prototype: {
        };

    }

    namespace highContrastChangedEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace isHighContrastEnabled {
        const prototype: {
        };

    }

    namespace isScreenReaderEnabled {
        const prototype: {
        };

    }

    namespace newAnnouncementReadyEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace screenReaderChangedEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

}

export namespace ActivityIndicator {
    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(): void;

        function componentWillUnmount(): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Alert {
    function show(title: any, message: any, buttons: any, options: any): void;

    namespace show {
        const prototype: {
        };

    }

}

export namespace Animated {
    class Image {
        constructor(props: any);

        blur(): void;

        componentDidMount(): void;

        componentDidUpdate(): void;

        componentWillReceiveProps(props: any): void;

        componentWillUnmount(): void;

        focus(): void;

        initializeComponent(props: any): void;

        render(): any;

        setFocusLimited(limited: any): void;

        setFocusRestricted(restricted: any): void;

        setNativeProps(props: any): void;

        static displayName: string;

    }

    class Text {
        constructor(props: any);

        blur(): void;

        componentDidMount(): void;

        componentDidUpdate(): void;

        componentWillReceiveProps(props: any): void;

        componentWillUnmount(): void;

        focus(): void;

        initializeComponent(props: any): void;

        render(): any;

        setFocusLimited(limited: any): void;

        setFocusRestricted(restricted: any): void;

        setNativeProps(props: any): void;

        static displayName: string;

    }

    class TextInput {
        constructor(props: any);

        blur(): void;

        componentDidMount(): void;

        componentDidUpdate(): void;

        componentWillReceiveProps(props: any): void;

        componentWillUnmount(): void;

        focus(): void;

        initializeComponent(props: any): void;

        render(): any;

        setFocusLimited(limited: any): void;

        setFocusRestricted(restricted: any): void;

        setNativeProps(props: any): void;

        static displayName: string;

    }

    class Value {
        constructor(value: any);

        addAnimation(animation: any): any;

        addCssProperty(key: any, value: any): void;

        addListener(callback: any): any;

        destroy(): void;

        getAnimation(id: any): any;

        getCssValueString(): any;

        getId(): any;

        getValue(): any;

        interpolate(config: any): any;

        isInitialized(): any;

        removeAllListeners(): void;

        removeListener(id: any): void;

        setAsInitialized(element: any): void;

        setValue(value: any): void;

        startAnimation(id: any, onEnd: any): void;

        stopAnimation(id: any): void;

        updateElementStylesOnto(styles: any): void;

    }

    class View {
        constructor(props: any);

        blur(): void;

        componentDidMount(): void;

        componentDidUpdate(): void;

        componentWillReceiveProps(props: any): void;

        componentWillUnmount(): void;

        focus(): void;

        initializeComponent(props: any): void;

        render(): any;

        setFocusLimited(limited: any): void;

        setFocusRestricted(restricted: any): void;

        setNativeProps(props: any): void;

        static displayName: string;

    }

    function Animation(): void;

    function createValue(initialValue: any): any;

    function interpolate(value: any, inputRange: any, outputRange: any): any;

    function parallel(animations: any): any;

    function sequence(animations: any): any;

    function timing(value: any, config: any): any;

    namespace Animation {
        const prototype: {
        };

    }

    namespace Easing {
        function CubicBezier(x1: any, y1: any, x2: any, y2: any): any;

        function Default(): any;

        function In(): any;

        function InBack(): any;

        function InOut(): any;

        function InOutBack(): any;

        function Linear(): any;

        function Out(): any;

        function OutBack(): any;

        function StepEnd(): any;

        function StepStart(): any;

        function Steps(intervals: any, end: any): any;

        namespace CubicBezier {
            const prototype: {
            };

        }

        namespace Default {
            const prototype: {
            };

        }

        namespace In {
            const prototype: {
            };

        }

        namespace InBack {
            const prototype: {
            };

        }

        namespace InOut {
            const prototype: {
            };

        }

        namespace InOutBack {
            const prototype: {
            };

        }

        namespace Linear {
            const prototype: {
            };

        }

        namespace Out {
            const prototype: {
            };

        }

        namespace OutBack {
            const prototype: {
            };

        }

        namespace StepEnd {
            const prototype: {
            };

        }

        namespace StepStart {
            const prototype: {
            };

        }

        namespace Steps {
            const prototype: {
            };

        }

    }

    namespace Image {
        namespace prototype {
            const isMounted: any;

            const isReactComponent: {
            };

            const replaceState: any;

            function blur(): void;

            function componentDidMount(): void;

            function componentDidUpdate(): void;

            function componentWillReceiveProps(props: any): void;

            function componentWillUnmount(): void;

            function focus(): void;

            function forceUpdate(callback: any): void;

            function initializeComponent(props: any): void;

            function render(): any;

            function setFocusLimited(limited: any): void;

            function setFocusRestricted(restricted: any): void;

            function setNativeProps(props: any): void;

            function setState(partialState: any, callback: any): void;

            namespace blur {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.blur
                const prototype: any;

            }

            namespace componentDidMount {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.componentDidMount
                const prototype: any;

            }

            namespace componentDidUpdate {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.componentDidUpdate
                const prototype: any;

            }

            namespace componentWillReceiveProps {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.componentWillReceiveProps
                const prototype: any;

            }

            namespace componentWillUnmount {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.componentWillUnmount
                const prototype: any;

            }

            namespace focus {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.focus
                const prototype: any;

            }

            namespace forceUpdate {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.forceUpdate
                const prototype: any;

            }

            namespace initializeComponent {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.initializeComponent
                const prototype: any;

            }

            namespace render {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.render
                const prototype: any;

            }

            namespace setFocusLimited {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.setFocusLimited
                const prototype: any;

            }

            namespace setFocusRestricted {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.setFocusRestricted
                const prototype: any;

            }

            namespace setNativeProps {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.setNativeProps
                const prototype: any;

            }

            namespace setState {
                // Too-deep object hierarchy from reactxp.Animated.Image.prototype.setState
                const prototype: any;

            }

        }

    }

    namespace Text {
        namespace prototype {
            const isMounted: any;

            const isReactComponent: {
            };

            const replaceState: any;

            function blur(): void;

            function componentDidMount(): void;

            function componentDidUpdate(): void;

            function componentWillReceiveProps(props: any): void;

            function componentWillUnmount(): void;

            function focus(): void;

            function forceUpdate(callback: any): void;

            function initializeComponent(props: any): void;

            function render(): any;

            function setFocusLimited(limited: any): void;

            function setFocusRestricted(restricted: any): void;

            function setNativeProps(props: any): void;

            function setState(partialState: any, callback: any): void;

            namespace blur {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.blur
                const prototype: any;

            }

            namespace componentDidMount {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.componentDidMount
                const prototype: any;

            }

            namespace componentDidUpdate {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.componentDidUpdate
                const prototype: any;

            }

            namespace componentWillReceiveProps {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.componentWillReceiveProps
                const prototype: any;

            }

            namespace componentWillUnmount {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.componentWillUnmount
                const prototype: any;

            }

            namespace focus {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.focus
                const prototype: any;

            }

            namespace forceUpdate {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.forceUpdate
                const prototype: any;

            }

            namespace initializeComponent {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.initializeComponent
                const prototype: any;

            }

            namespace render {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.render
                const prototype: any;

            }

            namespace setFocusLimited {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.setFocusLimited
                const prototype: any;

            }

            namespace setFocusRestricted {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.setFocusRestricted
                const prototype: any;

            }

            namespace setNativeProps {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.setNativeProps
                const prototype: any;

            }

            namespace setState {
                // Too-deep object hierarchy from reactxp.Animated.Text.prototype.setState
                const prototype: any;

            }

        }

    }

    namespace TextInput {
        namespace prototype {
            const isMounted: any;

            const isReactComponent: {
            };

            const replaceState: any;

            function blur(): void;

            function componentDidMount(): void;

            function componentDidUpdate(): void;

            function componentWillReceiveProps(props: any): void;

            function componentWillUnmount(): void;

            function focus(): void;

            function forceUpdate(callback: any): void;

            function initializeComponent(props: any): void;

            function render(): any;

            function setFocusLimited(limited: any): void;

            function setFocusRestricted(restricted: any): void;

            function setNativeProps(props: any): void;

            function setState(partialState: any, callback: any): void;

            namespace blur {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.blur
                const prototype: any;

            }

            namespace componentDidMount {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.componentDidMount
                const prototype: any;

            }

            namespace componentDidUpdate {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.componentDidUpdate
                const prototype: any;

            }

            namespace componentWillReceiveProps {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.componentWillReceiveProps
                const prototype: any;

            }

            namespace componentWillUnmount {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.componentWillUnmount
                const prototype: any;

            }

            namespace focus {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.focus
                const prototype: any;

            }

            namespace forceUpdate {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.forceUpdate
                const prototype: any;

            }

            namespace initializeComponent {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.initializeComponent
                const prototype: any;

            }

            namespace render {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.render
                const prototype: any;

            }

            namespace setFocusLimited {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.setFocusLimited
                const prototype: any;

            }

            namespace setFocusRestricted {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.setFocusRestricted
                const prototype: any;

            }

            namespace setNativeProps {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.setNativeProps
                const prototype: any;

            }

            namespace setState {
                // Too-deep object hierarchy from reactxp.Animated.TextInput.prototype.setState
                const prototype: any;

            }

        }

    }

    namespace Value {
        namespace prototype {
            function addAnimation(animation: any): any;

            function addCssProperty(key: any, value: any): void;

            function addListener(callback: any): any;

            function destroy(): void;

            function getAnimation(id: any): any;

            function getCssValueString(): any;

            function getId(): any;

            function getValue(): any;

            function interpolate(config: any): any;

            function isInitialized(): any;

            function removeAllListeners(): void;

            function removeListener(id: any): void;

            function setAsInitialized(element: any): void;

            function setValue(value: any): void;

            function startAnimation(id: any, onEnd: any): void;

            function stopAnimation(id: any): void;

            function updateElementStylesOnto(styles: any): void;

            namespace addAnimation {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.addAnimation
                const prototype: any;

            }

            namespace addCssProperty {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.addCssProperty
                const prototype: any;

            }

            namespace addListener {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.addListener
                const prototype: any;

            }

            namespace destroy {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.destroy
                const prototype: any;

            }

            namespace getAnimation {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.getAnimation
                const prototype: any;

            }

            namespace getCssValueString {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.getCssValueString
                const prototype: any;

            }

            namespace getId {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.getId
                const prototype: any;

            }

            namespace getValue {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.getValue
                const prototype: any;

            }

            namespace interpolate {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.interpolate
                const prototype: any;

            }

            namespace isInitialized {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.isInitialized
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.removeListener
                const prototype: any;

            }

            namespace setAsInitialized {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.setAsInitialized
                const prototype: any;

            }

            namespace setValue {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.setValue
                const prototype: any;

            }

            namespace startAnimation {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.startAnimation
                const prototype: any;

            }

            namespace stopAnimation {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.stopAnimation
                const prototype: any;

            }

            namespace updateElementStylesOnto {
                // Too-deep object hierarchy from reactxp.Animated.Value.prototype.updateElementStylesOnto
                const prototype: any;

            }

        }

    }

    namespace View {
        namespace prototype {
            const isMounted: any;

            const isReactComponent: {
            };

            const replaceState: any;

            function blur(): void;

            function componentDidMount(): void;

            function componentDidUpdate(): void;

            function componentWillReceiveProps(props: any): void;

            function componentWillUnmount(): void;

            function focus(): void;

            function forceUpdate(callback: any): void;

            function initializeComponent(props: any): void;

            function render(): any;

            function setFocusLimited(limited: any): void;

            function setFocusRestricted(restricted: any): void;

            function setNativeProps(props: any): void;

            function setState(partialState: any, callback: any): void;

            namespace blur {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.blur
                const prototype: any;

            }

            namespace componentDidMount {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.componentDidMount
                const prototype: any;

            }

            namespace componentDidUpdate {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.componentDidUpdate
                const prototype: any;

            }

            namespace componentWillReceiveProps {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.componentWillReceiveProps
                const prototype: any;

            }

            namespace componentWillUnmount {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.componentWillUnmount
                const prototype: any;

            }

            namespace focus {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.focus
                const prototype: any;

            }

            namespace forceUpdate {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.forceUpdate
                const prototype: any;

            }

            namespace initializeComponent {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.initializeComponent
                const prototype: any;

            }

            namespace render {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.render
                const prototype: any;

            }

            namespace setFocusLimited {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.setFocusLimited
                const prototype: any;

            }

            namespace setFocusRestricted {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.setFocusRestricted
                const prototype: any;

            }

            namespace setNativeProps {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.setNativeProps
                const prototype: any;

            }

            namespace setState {
                // Too-deep object hierarchy from reactxp.Animated.View.prototype.setState
                const prototype: any;

            }

        }

    }

    namespace createValue {
        const prototype: {
        };

    }

    namespace interpolate {
        const prototype: {
        };

    }

    namespace parallel {
        const prototype: {
        };

    }

    namespace sequence {
        const prototype: {
        };

    }

    namespace timing {
        const prototype: {
        };

    }

}

export namespace App {
    function getActivationState(): any;

    function initialize(debug: any, development: any): void;

    namespace activationStateChangedEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace getActivationState {
        const prototype: {
        };

    }

    namespace initialize {
        const prototype: {
        };

    }

    namespace memoryWarningEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

}

export namespace Button {
    namespace childContextTypes {
        function hasRxButtonAscendant(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace hasRxButtonAscendant {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace contextTypes {
        function focusManager(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hasRxButtonAscendant(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace focusManager {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hasRxButtonAscendant {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace propTypes {
        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function blur(): void;

        function componentDidMount(...args: any[]): void;

        function componentWillUnmount(...args: any[]): void;

        function componentWillUpdate(...args: any[]): void;

        function focus(): void;

        function forceUpdate(callback: any): void;

        function getChildContext(): any;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace blur {
            const prototype: {
            };

        }

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace componentWillUpdate {
            const prototype: {
            };

        }

        namespace focus {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace getChildContext {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Children {
    function count(children: any, context: any): any;

    function forEach(children: any, forEachFunc: any, forEachContext: any): any;

    function map(children: any, func: any, context: any): any;

    function only(children: any): any;

    function toArray(children: any): any;

    namespace count {
        const prototype: {
        };

    }

    namespace forEach {
        const prototype: {
        };

    }

    namespace map {
        const prototype: {
        };

    }

    namespace only {
        const prototype: {
        };

    }

    namespace toArray {
        const prototype: {
        };

    }

}

export namespace Clipboard {
    function getText(): void;

    function setText(text: any): void;

    namespace getText {
        const prototype: {
        };

    }

    namespace setText {
        const prototype: {
        };

    }

}

export namespace Component {
    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function forceUpdate(callback: any): void;

        function setState(partialState: any, callback: any): void;

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace GestureView {
    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(): void;

        function componentWillUnmount(): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Image {
    namespace childContextTypes {
        function isRxParentAText(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

    }

    namespace contextTypes {
        function isRxParentAText(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace isRxParentAText {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prefetch {
        const prototype: {
        };

    }

    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(): void;

        function componentWillReceiveProps(nextProps: any): void;

        function componentWillUnmount(): void;

        function forceUpdate(callback: any): void;

        function getChildContext(): any;

        function getNativeHeight(): any;

        function getNativeWidth(): any;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillReceiveProps {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace getChildContext {
            const prototype: {
            };

        }

        namespace getNativeHeight {
            const prototype: {
            };

        }

        namespace getNativeWidth {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Input {
    function dispatchKeyDown(e: any): void;

    function dispatchKeyUp(e: any): void;

    namespace backButtonEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace dispatchKeyDown {
        const prototype: {
        };

    }

    namespace dispatchKeyUp {
        const prototype: {
        };

    }

    namespace keyDownEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace keyUpEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

}

export namespace International {
    function allowRTL(allow: any): void;

    function forceRTL(force: any): void;

    function isRTL(): any;

    namespace allowRTL {
        const prototype: {
        };

    }

    namespace forceRTL {
        const prototype: {
        };

    }

    namespace isRTL {
        const prototype: {
        };

    }

}

export namespace Link {
    namespace contextTypes {
        function focusManager(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace focusManager {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(...args: any[]): void;

        function componentWillUnmount(...args: any[]): void;

        function componentWillUpdate(...args: any[]): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace componentWillUpdate {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Linking {
    function getInitialUrl(): any;

    function launchEmail(emailInfo: any): any;

    function launchSms(phoneInfo: any): any;

    function openUrl(url: any): any;

    namespace deepLinkRequestEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace getInitialUrl {
        const prototype: {
        };

    }

    namespace launchEmail {
        const prototype: {
        };

    }

    namespace launchSms {
        const prototype: {
        };

    }

    namespace openUrl {
        const prototype: {
        };

    }

}

export namespace Location {
    function clearWatch(watchID: any): void;

    function getCurrentPosition(options: any): any;

    function isAvailable(): any;

    function setConfiguration(config: any): void;

    function watchPosition(successCallback: any, errorCallback: any, options: any): any;

    namespace clearWatch {
        const prototype: {
        };

    }

    namespace getCurrentPosition {
        const prototype: {
        };

    }

    namespace isAvailable {
        const prototype: {
        };

    }

    namespace setConfiguration {
        const prototype: {
        };

    }

    namespace watchPosition {
        const prototype: {
        };

    }

}

export namespace Modal {
    function dismiss(modalId: any): void;

    function dismissAll(): void;

    function isDisplayed(modalId: any): any;

    function show(modal: any, modalId: any, options: any): void;

    namespace dismiss {
        const prototype: {
        };

    }

    namespace dismissAll {
        const prototype: {
        };

    }

    namespace isDisplayed {
        const prototype: {
        };

    }

    namespace show {
        const prototype: {
        };

    }

}

export namespace Network {
    function getType(): any;

    function isConnected(): any;

    namespace connectivityChangedEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace getType {
        const prototype: {
        };

    }

    namespace isConnected {
        const prototype: {
        };

    }

}

export namespace Picker {
    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Platform {
    function getType(): any;

    namespace getType {
        const prototype: {
        };

    }

}

export namespace Popup {
    function autoDismiss(popupId: any, delay: any): void;

    function dismiss(popupId: any): void;

    function dismissAll(): void;

    function show(options: any, popupId: any, delay: any): any;

    namespace autoDismiss {
        const prototype: {
        };

    }

    namespace dismiss {
        const prototype: {
        };

    }

    namespace dismissAll {
        const prototype: {
        };

    }

    namespace show {
        const prototype: {
        };

    }

}

export namespace ScrollView {
    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function addToScrollLeft(deltaLeft: any, animate: any): void;

        function addToScrollTop(deltaTop: any, animate: any): void;

        function blur(): void;

        function componentDidMount(): void;

        function componentDidUpdate(): void;

        function componentWillMount(): void;

        function componentWillReceiveProps(newProps: any): void;

        function componentWillUnmount(): void;

        function focus(): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setScrollLeft(scrollLeft: any, animate: any): void;

        function setScrollTop(scrollTop: any, animate: any): void;

        function setState(partialState: any, callback: any): void;

        namespace addToScrollLeft {
            const prototype: {
            };

        }

        namespace addToScrollTop {
            const prototype: {
            };

        }

        namespace blur {
            const prototype: {
            };

        }

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentDidUpdate {
            const prototype: {
            };

        }

        namespace componentWillMount {
            const prototype: {
            };

        }

        namespace componentWillReceiveProps {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace focus {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setScrollLeft {
            const prototype: {
            };

        }

        namespace setScrollTop {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

    namespace setActivationState {
        const prototype: {
        };

    }

}

export namespace StatusBar {
    function isOverlay(): any;

    function setBackgroundColor(color: any, animated: any): void;

    function setBarStyle(style: any, animated: any): void;

    function setHidden(hidden: any, showHideTransition: any): void;

    function setNetworkActivityIndicatorVisible(value: any): void;

    function setTranslucent(translucent: any): void;

    namespace isOverlay {
        const prototype: {
        };

    }

    namespace setBackgroundColor {
        const prototype: {
        };

    }

    namespace setBarStyle {
        const prototype: {
        };

    }

    namespace setHidden {
        const prototype: {
        };

    }

    namespace setNetworkActivityIndicatorVisible {
        const prototype: {
        };

    }

    namespace setTranslucent {
        const prototype: {
        };

    }

}

export namespace Storage {
    function clear(): any;

    function getItem(key: any): any;

    function removeItem(key: any): any;

    function setItem(key: any, value: any): any;

    namespace clear {
        const prototype: {
        };

    }

    namespace getItem {
        const prototype: {
        };

    }

    namespace removeItem {
        const prototype: {
        };

    }

    namespace setItem {
        const prototype: {
        };

    }

}

export namespace Styles {
    function combine(ruleSet1: any, ruleSet2: any): any;

    function createAnimatedImageStyle(ruleSet: any): any;

    function createAnimatedTextInputStyle(ruleSet: any): any;

    function createAnimatedTextStyle(ruleSet: any): any;

    function createAnimatedViewStyle(ruleSet: any): any;

    function createButtonStyle(ruleSet: any, cacheStyle: any): any;

    function createImageStyle(ruleSet: any, cacheStyle: any): any;

    function createLinkStyle(ruleSet: any, cacheStyle: any): any;

    function createPickerStyle(ruleSet: any, cacheStyle: any): any;

    function createScrollViewStyle(ruleSet: any, cacheStyle: any): any;

    function createTextInputStyle(ruleSet: any, cacheStyle: any): any;

    function createTextStyle(ruleSet: any, cacheStyle: any): any;

    function createViewStyle(ruleSet: any, cacheStyle: any): any;

    function createWebViewStyle(ruleSet: any, cacheStyle: any): any;

    function getCssPropertyAliasesCssStyle(): any;

    function getParentComponentName(component: any): any;

    namespace combine {
        const prototype: {
        };

    }

    namespace createAnimatedImageStyle {
        const prototype: {
        };

    }

    namespace createAnimatedTextInputStyle {
        const prototype: {
        };

    }

    namespace createAnimatedTextStyle {
        const prototype: {
        };

    }

    namespace createAnimatedViewStyle {
        const prototype: {
        };

    }

    namespace createButtonStyle {
        const prototype: {
        };

    }

    namespace createImageStyle {
        const prototype: {
        };

    }

    namespace createLinkStyle {
        const prototype: {
        };

    }

    namespace createPickerStyle {
        const prototype: {
        };

    }

    namespace createScrollViewStyle {
        const prototype: {
        };

    }

    namespace createTextInputStyle {
        const prototype: {
        };

    }

    namespace createTextStyle {
        const prototype: {
        };

    }

    namespace createViewStyle {
        const prototype: {
        };

    }

    namespace createWebViewStyle {
        const prototype: {
        };

    }

    namespace getCssPropertyAliasesCssStyle {
        const prototype: {
        };

    }

    namespace getParentComponentName {
        const prototype: {
        };

    }

}

export namespace Text {
    namespace childContextTypes {
        function isRxParentAText(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

    }

    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function blur(): void;

        function focus(): void;

        function forceUpdate(callback: any): void;

        function getChildContext(): any;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace blur {
            const prototype: {
            };

        }

        namespace focus {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace getChildContext {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace TextInput {
    namespace contextTypes {
        function focusManager(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace focusManager {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function blur(): void;

        function componentDidMount(...args: any[]): void;

        function componentWillReceiveProps(nextProps: any): void;

        function componentWillUnmount(...args: any[]): void;

        function componentWillUpdate(...args: any[]): void;

        function focus(): void;

        function forceUpdate(callback: any): void;

        function getSelectionRange(): any;

        function isFocused(): any;

        function render(): any;

        function selectAll(): void;

        function selectRange(start: any, end: any): void;

        function setAccessibilityFocus(): void;

        function setState(partialState: any, callback: any): void;

        function setValue(value: any): void;

        namespace blur {
            const prototype: {
            };

        }

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillReceiveProps {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace componentWillUpdate {
            const prototype: {
            };

        }

        namespace focus {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace getSelectionRange {
            const prototype: {
            };

        }

        namespace isFocused {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace selectAll {
            const prototype: {
            };

        }

        namespace selectRange {
            const prototype: {
            };

        }

        namespace setAccessibilityFocus {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

        namespace setValue {
            const prototype: {
            };

        }

    }

}

export namespace Types {
    class SubscribableEvent {
        constructor(_allowStopPropagation: any, ...args: any[]);

        dispose(): void;

        subscribe(callback: any): any;

        unsubscribe(callback: any): void;

    }

    class SubscriptionToken {
        constructor(_event: any, _callback: any);

        unsubscribe(): void;

    }

    const AccessibilityLiveRegion: {
        "0": string;
        "1": string;
        "2": string;
        Assertive: number;
        None: number;
        Polite: number;
    };

    const AccessibilityTrait: {
        "0": string;
        "1": string;
        "10": string;
        "11": string;
        "12": string;
        "13": string;
        "14": string;
        "15": string;
        "16": string;
        "17": string;
        "18": string;
        "19": string;
        "2": string;
        "20": string;
        "21": string;
        "22": string;
        "23": string;
        "24": string;
        "25": string;
        "26": string;
        "27": string;
        "28": string;
        "29": string;
        "3": string;
        "30": string;
        "31": string;
        "32": string;
        "33": string;
        "34": string;
        "35": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        Adjustable: number;
        AllowsDirectInteraction: number;
        Button: number;
        CheckBox: number;
        Checked: number;
        ComboBox: number;
        Dialog: number;
        Disabled: number;
        FrequentUpdates: number;
        Group: number;
        HasPopup: number;
        Header: number;
        Image: number;
        Key: number;
        Link: number;
        List: number;
        ListBox: number;
        ListItem: number;
        Log: number;
        Menu: number;
        MenuBar: number;
        MenuItem: number;
        None: number;
        Option: number;
        PageTurn: number;
        Plays: number;
        Radio_button_checked: number;
        Radio_button_unchecked: number;
        Search: number;
        Selected: number;
        StartsMedia: number;
        Status: number;
        Summary: number;
        Tab: number;
        TabList: number;
        Text: number;
    };

    const Animated: {
    };

    const AppActivationState: {
        "1": string;
        "2": string;
        "3": string;
        "4": string;
        Active: number;
        Background: number;
        Extension: number;
        Inactive: number;
    };

    const DeviceNetworkType: {
        "0": string;
        "1": string;
        "2": string;
        "3": string;
        "4": string;
        "5": string;
        Mobile2G: number;
        Mobile3G: number;
        Mobile4G: number;
        None: number;
        Unknown: number;
        Wifi: number;
    };

    const GestureMouseCursor: {
        "0": string;
        "1": string;
        "2": string;
        "3": string;
        Default: number;
        Grab: number;
        Move: number;
        Pointer: number;
    };

    const ImportantForAccessibility: {
        "1": string;
        "2": string;
        "3": string;
        "4": string;
        Auto: number;
        No: number;
        NoHideDescendants: number;
        Yes: number;
    };

    const LinkingErrorCode: {
        "0": string;
        "1": string;
        "2": string;
        "3": string;
        Blocked: number;
        InitialUrlNotFound: number;
        NoAppFound: number;
        UnexpectedFailure: number;
    };

    const LocationErrorType: {
        "1": string;
        "2": string;
        "3": string;
        PermissionDenied: number;
        PositionUnavailable: number;
        Timeout: number;
    };

    const PreferredPanGesture: {
        "0": string;
        "1": string;
        Horizontal: number;
        Vertical: number;
    };

    const WebViewSandboxMode: {
        "0": string;
        "1": string;
        "128": string;
        "16": string;
        "2": string;
        "256": string;
        "32": string;
        "4": string;
        "512": string;
        "64": string;
        "8": string;
        AllowForms: number;
        AllowModals: number;
        AllowOrientationLock: number;
        AllowPointerLock: number;
        AllowPopups: number;
        AllowPopupsToEscapeSandbox: number;
        AllowPresentation: number;
        AllowSameOrigin: number;
        AllowScripts: number;
        AllowTopNavigation: number;
        None: number;
    };

    function AnimatedValue(val: any): void;

    namespace AnimatedValue {
        const prototype: {
        };

    }

    namespace SubscribableEvent {
        namespace prototype {
            function dispose(): void;

            function subscribe(callback: any): any;

            function unsubscribe(callback: any): void;

            namespace dispose {
                // Too-deep object hierarchy from reactxp.Types.SubscribableEvent.prototype.dispose
                const prototype: any;

            }

            namespace subscribe {
                // Too-deep object hierarchy from reactxp.Types.SubscribableEvent.prototype.subscribe
                const prototype: any;

            }

            namespace unsubscribe {
                // Too-deep object hierarchy from reactxp.Types.SubscribableEvent.prototype.unsubscribe
                const prototype: any;

            }

        }

    }

    namespace SubscriptionToken {
        namespace prototype {
            function unsubscribe(): void;

            namespace unsubscribe {
                // Too-deep object hierarchy from reactxp.Types.SubscriptionToken.prototype.unsubscribe
                const prototype: any;

            }

        }

    }

}

export namespace UserInterface {
    function dismissKeyboard(): void;

    function enableTouchLatencyEvents(latencyThresholdMs: any): void;

    function evaluateTouchLatency(e: any): void;

    function getContentSizeMultiplier(): any;

    function getMaxContentSizeMultiplier(): any;

    function getPixelRatio(): any;

    function isHighPixelDensityScreen(): any;

    function isNavigatingWithKeyboard(): any;

    function measureLayoutRelativeToAncestor(component: any, ancestor: any): any;

    function measureLayoutRelativeToWindow(component: any): any;

    function measureWindow(): any;

    function registerRootView(viewKey: any, getComponentFunc: any): void;

    function setMainView(element: any): void;

    function setMaxContentSizeMultiplier(maxContentSizeMultiplier: any): void;

    function useCustomScrollbars(enable: any): void;

    namespace contentSizeMultiplierChangedEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace dismissKeyboard {
        const prototype: {
        };

    }

    namespace enableTouchLatencyEvents {
        const prototype: {
        };

    }

    namespace evaluateTouchLatency {
        const prototype: {
        };

    }

    namespace getContentSizeMultiplier {
        const prototype: {
        };

    }

    namespace getMaxContentSizeMultiplier {
        const prototype: {
        };

    }

    namespace getPixelRatio {
        const prototype: {
        };

    }

    namespace isHighPixelDensityScreen {
        const prototype: {
        };

    }

    namespace isNavigatingWithKeyboard {
        const prototype: {
        };

    }

    namespace keyboardNavigationEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace measureLayoutRelativeToAncestor {
        const prototype: {
        };

    }

    namespace measureLayoutRelativeToWindow {
        const prototype: {
        };

    }

    namespace measureWindow {
        const prototype: {
        };

    }

    namespace registerRootView {
        const prototype: {
        };

    }

    namespace setMainView {
        const prototype: {
        };

    }

    namespace setMaxContentSizeMultiplier {
        const prototype: {
        };

    }

    namespace touchLatencyEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

    namespace useCustomScrollbars {
        const prototype: {
        };

    }

}

export namespace UserPresence {
    function isUserPresent(): any;

    namespace isUserPresent {
        const prototype: {
        };

    }

    namespace userPresenceChangedEvent {
        function dispose(): void;

        function fire(...args: any[]): any;

        function subscribe(callback: any): any;

        function unsubscribe(callback: any): void;

        namespace dispose {
            const prototype: {
            };

        }

        namespace fire {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

    }

}

export namespace View {
    namespace childContextTypes {
        function focusManager(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function isRxParentAText(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace focusManager {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace contextTypes {
        function focusManager(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function isRxParentAText(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace focusManager {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace isRxParentAText {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function blur(): void;

        function componentDidMount(...args: any[]): void;

        function componentDidUpdate(): void;

        function componentWillReceiveProps(nextProps: any): void;

        function componentWillUnmount(...args: any[]): void;

        function componentWillUpdate(...args: any[]): void;

        function focus(): void;

        function forceUpdate(callback: any): void;

        function getChildContext(): any;

        function render(): any;

        function setFocusLimited(limited: any): void;

        function setFocusRestricted(restricted: any): void;

        function setState(partialState: any, callback: any): void;

        namespace blur {
            const prototype: {
            };

        }

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentDidUpdate {
            const prototype: {
            };

        }

        namespace componentWillReceiveProps {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace componentWillUpdate {
            const prototype: {
            };

        }

        namespace focus {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace getChildContext {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setFocusLimited {
            const prototype: {
            };

        }

        namespace setFocusRestricted {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

    namespace setActivationState {
        const prototype: {
        };

    }

}

export namespace WebView {
    namespace prototype {
        const isMounted: any;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(): void;

        function componentDidUpdate(prevProps: any, prevState: any): void;

        function forceUpdate(callback: any): void;

        function goBack(): void;

        function goForward(): void;

        function postMessage(message: any, targetOrigin: any): void;

        function reload(): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentDidUpdate {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace goBack {
            const prototype: {
            };

        }

        namespace goForward {
            const prototype: {
            };

        }

        namespace postMessage {
            const prototype: {
            };

        }

        namespace reload {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace createElement {
    const prototype: {
    };

}

